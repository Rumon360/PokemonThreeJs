{"version":3,"sources":["components/state.js","components/section.js","components/header.js","App.js","serviceWorker.js","index.js"],"names":["state","sections","pages","zoom","top","createRef","offsetContext","createContext","Section","children","offset","factor","props","useThree","size","viewport","useContext","viewportWidth","width","viewportHeight","height","canvasWidth","canvasHeight","mobile","margin","contentMaxWidth","sectionHeight","aspect","useSection","parentOffset","ref","useRef","undefined","useFrame","curY","current","position","y","curTop","lerp","Provider","value","Header","className","Model","modelPath","name","gltf","useGLTFLoader","object","scene","dispose","scale","Lights","intensity","HTMLContent","domContent","bgColor","rotation","useInView","threshold","refItem","inView","useEffect","document","body","style","background","portal","fullscreen","App","scrollArea","onScroll","e","target","scrollTop","colorManagement","camera","fov","fallback","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yQASeA,EAPD,CACZC,SAAU,EACVC,MAAO,EACPC,KAAM,EACNC,IAAKC,uB,iCCDDC,EAAgBC,wBAAc,GAEpC,SAASC,EAAT,GAA0D,IAAvCC,EAAsC,EAAtCA,SAAUC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,OAAWC,EAAS,iBACvD,EAiBF,WACE,IAAQX,EAA0BD,EAA1BC,SAAUC,EAAgBF,EAAhBE,MAAOC,EAASH,EAATG,KACzB,EAA2BU,cAAnBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,SACRL,EAASM,qBAAWV,GACpBW,EAAgBF,EAASG,MACzBC,EAAiBJ,EAASK,OAC1BC,EAAcJ,EAAgBd,EAC9BmB,EAAeH,EAAiBhB,EAChCoB,EAAST,EAAKI,MAAQ,IACtBM,EAASH,GAAeE,EAAS,GAAM,IACvCE,EAAkBJ,GAAeE,EAAS,GAAM,IAChDG,EAAgBJ,IAAiBpB,EAAQ,IAAMD,EAAW,IAEhE,MAAO,CACL0B,OAFab,EAAKM,OAASD,EAG3BJ,WACAL,SACAO,gBACAE,iBACAE,cACAC,eACAC,SACAC,SACAC,kBACAC,iBAzCsDE,GAAxCC,EAAhB,EAAQnB,OAAsBgB,EAA9B,EAA8BA,cAAeC,EAA7C,EAA6CA,OACvCG,EAAMC,mBAOZ,OANArB,OAAoBsB,IAAXtB,EAAuBA,EAASmB,EACzCI,aAAS,WACP,IAAMC,EAAOJ,EAAIK,QAAQC,SAASC,EAC5BC,EAAStC,EAAMI,IAAI+B,QAAUR,EACnCG,EAAIK,QAAQC,SAASC,EAAIE,IAAKL,EAAOI,EAAStC,EAAMG,KAAQQ,EAAQ,OAGpE,kBAACL,EAAckC,SAAf,CAAwBC,MAAO/B,GAC7B,2CAAWE,EAAX,CAAkBwB,SAAU,CAAC,GAAIV,EAAgBhB,EAASC,EAAQ,KAChE,2BAAOmB,IAAKA,GAAMrB,K,MCjBX,SAASiC,IACtB,OACE,gCACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,QAAf,c,oBCMFC,EAAQ,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,UAAWC,EAAW,EAAXA,KACpBC,EAAOC,YAAcH,GAAW,GACtC,MAAa,WAATC,EAEA,+BAAWG,OAAQF,EAAKG,MAAOC,QAAS,KAAMC,MAAO,CAAC,GAAI,GAAI,MAE9C,WAATN,EAEP,+BAAWG,OAAQF,EAAKG,MAAOC,QAAS,KAAMC,MAAO,CAAC,GAAI,GAAI,MAI9D,+BAAWH,OAAQF,EAAKG,MAAOC,QAAS,KAAMC,MAAO,CAAC,IAAK,IAAK,QAIhEC,EAAS,WACb,OACE,oCACE,kCAAcC,UAAW,KACzB,sCAAkBlB,SAAU,CAAC,GAAI,GAAI,GAAIkB,UAAW,IACpD,sCAAkBlB,SAAU,CAAC,EAAG,GAAI,GAAIkB,UAAW,MACnD,+BAAWA,UAAW,EAAGlB,SAAU,CAAC,IAAM,EAAG,OAK7CmB,EAAc,SAAC,GAOd,IANL9C,EAMI,EANJA,SACAoC,EAKI,EALJA,UACAT,EAII,EAJJA,SACAoB,EAGI,EAHJA,WACAC,EAEI,EAFJA,QACAX,EACI,EADJA,KAEMhB,EAAMC,iBAAO,MACnBE,aAAS,kBAAOH,EAAIK,QAAQuB,SAASrB,GAAK,OAE1C,MAA0BsB,YAAU,CAAEC,UAAW,IAAjD,mBAAOC,EAAP,KAAgBC,EAAhB,KAKA,OAHAC,qBAAU,WACRD,IAAWE,SAASC,KAAKC,MAAMC,WAAaV,KAC3C,CAACK,IAEF,kBAACtD,EAAD,CAASG,OAAQ,IAAKD,OAAQ,GAC5B,2BAAO0B,SAAU,CAAC,EAAGA,EAAU,IAC7B,0BAAMN,IAAKA,EAAKM,SAAU,CAAC,GAAI,GAAI,IACjC,kBAAC,EAAD,CAAOS,UAAWA,EAAWC,KAAMA,KAErC,kBAAC,IAAD,CAAMsB,OAAQZ,EAAYa,YAAU,GAClC,yBAAK1B,UAAU,YAAYb,IAAK+B,GAC7BpD,OAQE,SAAS6D,IACtB,IAAMd,EAAazB,mBACbwC,EAAaxC,mBACbyC,EAAW,SAACC,GAAD,OAAQzE,EAAMI,IAAI+B,QAAUsC,EAAEC,OAAOC,WAMtD,OAJAZ,qBAAU,WACHS,EAAS,CAAEE,OAAQH,EAAWpC,YAClC,IAGD,oCACE,kBAACO,EAAD,MACA,yBAAKC,UAAU,aACb,kBAAC,IAAD,CAAQiC,iBAAe,EAACC,OAAQ,CAAEzC,SAAU,CAAC,EAAG,EAAG,KAAM0C,IAAK,KAC5D,kBAAC,EAAD,MACA,kBAAC,WAAD,CAAUC,SAAU,MAClB,kBAAC,EAAD,CACEvB,WAAYA,EACZX,UAAU,iCACVT,SAAU,IACVqB,QAAS,WAET,wBAAId,UAAU,SAAd,eAEF,kBAAC,EAAD,CACEG,KAAK,SACLU,WAAYA,EACZX,UAAU,6BACVT,SAAU,EACVqB,QAAS,WAET,wBAAId,UAAU,SAAd,WAEF,kBAAC,EAAD,CACEG,KAAK,SACLU,WAAYA,EACZX,UAAU,6BACVT,UAAW,IACXqB,QAAS,WAET,wBAAId,UAAU,SAAd,aAIN,yBAAKA,UAAU,aAAab,IAAKyC,EAAYC,SAAUA,GACrD,yBAAKN,MAAO,CAAE9B,SAAU,SAAUhC,IAAK,GAAK0B,IAAK0B,IACjD,yBAAKU,MAAO,CAAE9C,OAAO,GAAD,OAAsB,IAAjBpB,EAAMC,SAAX,YCzGV+E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvB,SAASwB,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2368b9f2.chunk.js","sourcesContent":["import { createRef } from \"react\";\r\n\r\nconst state = {\r\n  sections: 3,\r\n  pages: 3,\r\n  zoom: 1,\r\n  top: createRef(),\r\n};\r\n\r\nexport default state;\r\n","import React, { createContext, useRef, useContext } from \"react\";\r\nimport { useFrame, useThree } from \"react-three-fiber\";\r\nimport lerp from \"lerp\";\r\nimport state from \"./state\";\r\n\r\nconst offsetContext = createContext(0);\r\n\r\nfunction Section({ children, offset, factor, ...props }) {\r\n  const { offset: parentOffset, sectionHeight, aspect } = useSection();\r\n  const ref = useRef();\r\n  offset = offset !== undefined ? offset : parentOffset;\r\n  useFrame(() => {\r\n    const curY = ref.current.position.y;\r\n    const curTop = state.top.current / aspect;\r\n    ref.current.position.y = lerp(curY, (curTop / state.zoom) * factor, 0.1);\r\n  });\r\n  return (\r\n    <offsetContext.Provider value={offset}>\r\n      <group {...props} position={[0, -sectionHeight * offset * factor, 0]}>\r\n        <group ref={ref}>{children}</group>\r\n      </group>\r\n    </offsetContext.Provider>\r\n  );\r\n}\r\n\r\nfunction useSection() {\r\n  const { sections, pages, zoom } = state;\r\n  const { size, viewport } = useThree();\r\n  const offset = useContext(offsetContext);\r\n  const viewportWidth = viewport.width;\r\n  const viewportHeight = viewport.height;\r\n  const canvasWidth = viewportWidth / zoom;\r\n  const canvasHeight = viewportHeight / zoom;\r\n  const mobile = size.width < 700;\r\n  const margin = canvasWidth * (mobile ? 0.2 : 0.1);\r\n  const contentMaxWidth = canvasWidth * (mobile ? 0.8 : 0.6);\r\n  const sectionHeight = canvasHeight * ((pages - 1) / (sections - 1));\r\n  const aspect = size.height / viewportHeight;\r\n  return {\r\n    aspect,\r\n    viewport,\r\n    offset,\r\n    viewportWidth,\r\n    viewportHeight,\r\n    canvasWidth,\r\n    canvasHeight,\r\n    mobile,\r\n    margin,\r\n    contentMaxWidth,\r\n    sectionHeight,\r\n  };\r\n}\r\n\r\nexport { Section, useSection };\r\n","import React from \"react\";\r\n\r\nexport default function Header() {\r\n  return (\r\n    <header>\r\n      <div className=\"header-inner\">\r\n        <div className=\"logo\">Pokemon.</div>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n","import React, { Suspense, useEffect, useRef } from \"react\";\r\nimport { Canvas, useFrame } from \"react-three-fiber\";\r\nimport { Section } from \"./components/section\";\r\nimport \"./App.scss\";\r\n//Components\r\nimport Header from \"./components/header\";\r\n\r\nimport { Html, useGLTFLoader } from \"drei\";\r\nimport state from \"./components/state\";\r\n\r\nimport { useInView } from \"react-intersection-observer\";\r\n\r\nconst Model = ({ modelPath, name }) => {\r\n  const gltf = useGLTFLoader(modelPath, true);\r\n  if (name === \"baltoy\") {\r\n    return (\r\n      <primitive object={gltf.scene} dispose={null} scale={[20, 20, 20]} />\r\n    );\r\n  } else if (name === \"boppin\") {\r\n    return (\r\n      <primitive object={gltf.scene} dispose={null} scale={[50, 50, 50]} />\r\n    );\r\n  } else\r\n    return (\r\n      <primitive object={gltf.scene} dispose={null} scale={[1.5, 1.5, 1.5]} />\r\n    );\r\n};\r\n\r\nconst Lights = () => {\r\n  return (\r\n    <>\r\n      <ambientLight intensity={0.3} />\r\n      <directionalLight position={[10, 10, 5]} intensity={1} />\r\n      <directionalLight position={[0, 10, 0]} intensity={1.5} />\r\n      <spotLight intensity={1} position={[1000, 0, 0]} />\r\n    </>\r\n  );\r\n};\r\n\r\nconst HTMLContent = ({\r\n  children,\r\n  modelPath,\r\n  position,\r\n  domContent,\r\n  bgColor,\r\n  name,\r\n}) => {\r\n  const ref = useRef(null);\r\n  useFrame(() => (ref.current.rotation.y += 0.01));\r\n\r\n  const [refItem, inView] = useInView({ threshold: 0 });\r\n\r\n  useEffect(() => {\r\n    inView && (document.body.style.background = bgColor);\r\n  }, [inView]);\r\n  return (\r\n    <Section factor={1.5} offset={1}>\r\n      <group position={[0, position, 0]}>\r\n        <mesh ref={ref} position={[0, -30, 0]}>\r\n          <Model modelPath={modelPath} name={name} />\r\n        </mesh>\r\n        <Html portal={domContent} fullscreen>\r\n          <div className=\"container\" ref={refItem}>\r\n            {children}\r\n          </div>\r\n        </Html>\r\n      </group>\r\n    </Section>\r\n  );\r\n};\r\n\r\nexport default function App() {\r\n  const domContent = useRef();\r\n  const scrollArea = useRef();\r\n  const onScroll = (e) => (state.top.current = e.target.scrollTop);\r\n\r\n  useEffect(() => {\r\n    void onScroll({ target: scrollArea.current });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <div className=\"container\">\r\n        <Canvas colorManagement camera={{ position: [0, 0, 120], fov: 70 }}>\r\n          <Lights />\r\n          <Suspense fallback={null}>\r\n            <HTMLContent\r\n              domContent={domContent}\r\n              modelPath=\"/whimsicott_pokemon/scene.gltf\"\r\n              position={250}\r\n              bgColor={\"#F59BAD\"}\r\n            >\r\n              <h1 className=\"title\">Whimsicott</h1>\r\n            </HTMLContent>\r\n            <HTMLContent\r\n              name=\"baltoy\"\r\n              domContent={domContent}\r\n              modelPath=\"/baltoy_pokemon/scene.gltf\"\r\n              position={0}\r\n              bgColor={\"#778BBE\"}\r\n            >\r\n              <h1 className=\"title\">Baltoy</h1>\r\n            </HTMLContent>\r\n            <HTMLContent\r\n              name=\"boppin\"\r\n              domContent={domContent}\r\n              modelPath=\"/boppin_ariados/scene.gltf\"\r\n              position={-250}\r\n              bgColor={\"#71BC68\"}\r\n            >\r\n              <h1 className=\"title\">Boppin</h1>\r\n            </HTMLContent>\r\n          </Suspense>\r\n        </Canvas>\r\n        <div className=\"scrollArea\" ref={scrollArea} onScroll={onScroll}>\r\n          <div style={{ position: \"sticky\", top: 0 }} ref={domContent}></div>\r\n          <div style={{ height: `${state.sections * 100}vh` }}></div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}